unit UBoard;

interface
uses SysUtils, Generics.Collections, Generics.Defaults,USquare;
type TBoard=class
const  SIZE=40;
  private
    squares:TList<SIZE>; //
  public
    procedure Board;
    procedure getSquare(start:TSquare; distance:integer);
    function getStartSquare:TSquare;
    procedure buildsquares;
    procedure build(i:integer);
    procedure linksquares;
    procedure link(i:integer);

end;

implementation

{ TBoard }

procedure TBoard.Board;
begin
  buildSquares;
  linkSquares;
end;

procedure TBoard.buildsquares;
var
  i: Integer;
begin
  for i := 1 to size do
  begin
    build(i);
    inc(i);
  end;
end;

procedure TBoard.build(i: integer);
var
  s:TSquare;
begin
  s.Create;
  s:=s('Square'+i,i+1);
  squares.add(s);
end;

procedure TBoard.getSquare(start: TSquare; distance: integer);
begin

end;

function TBoard.getStartSquare: TSquare;
begin
  result:=0;
  squares:=squares.Create(0);
end;

procedure TBoard.link(i: integer);
var
  current,next:TSquare;
begin
  current:=squares.create(i);
  next:=squares.create(i+1);
  current.setNextSquare(next);
end;

procedure TBoard.linksquares;
var i:integer;
first,last:TSquare;
begin
  for i := 0 to (size-1) do
  begin
    link(i);
    inc(i);
  end;
  first:=squares.create(0);
  last:=squares.create(size-1);
  last.setNextSquare(first);
end;

end.
